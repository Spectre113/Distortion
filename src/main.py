#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞—É–¥–∏–æ
"""

import argparse
import sys
from pathlib import Path
from typing import List

from audio_processor import AudioProcessor
from config import *


def get_audio_files(directory: Path) -> List[Path]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º
    """
    audio_files = []
    
    if not directory.exists():
        print(f"‚úó –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}")
        return audio_files
    
    for file_path in directory.iterdir():
        if file_path.is_file() and file_path.suffix.lower() in SUPPORTED_FORMATS:
            audio_files.append(file_path)
    
    return sorted(audio_files)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é HDemucs",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py                          # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ input/
  python main.py --file input/song.wav    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
  python main.py --model htdemucs_ft       # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
  python main.py --device cpu             # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU
        """
    )
    
    parser.add_argument(
        "--file", "-f",
        type=str,
        help="–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    
    parser.add_argument(
        "--input-dir", "-i",
        type=str,
        default=str(INPUT_DIR),
        help=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {INPUT_DIR})"
    )
    
    parser.add_argument(
        "--output-dir", "-o", 
        type=str,
        default=str(OUTPUT_DIR),
        help=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {OUTPUT_DIR})"
    )
    
    parser.add_argument(
        "--model", "-m",
        type=str,
        default=DEFAULT_MODEL,
        choices=["htdemucs", "htdemucs_ft", "hdemucs_mmi", "mdx", "mdx_q", "mdx_extra_q"],
        help=f"–ú–æ–¥–µ–ª—å HDemucs (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODEL})"
    )
    
    parser.add_argument(
        "--device", "-d",
        type=str,
        choices=["auto", "cpu", "cuda"],
        default="auto",
        help="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
    input_dir = Path(args.input_dir)
    output_dir = Path(args.output_dir)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device = args.device if args.device != "auto" else DEVICE
    
    print("üéµ Audio Separator —Å HDemucs")
    print("=" * 40)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor = AudioProcessor(model_name=args.model, device=device)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        files_to_process = []
        
        if args.file:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            file_path = Path(args.file)
            if file_path.exists():
                files_to_process = [file_path]
            else:
                print(f"‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return 1
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ input –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            files_to_process = get_audio_files(input_dir)
            
            if not files_to_process:
                print(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ {input_dir}")
                print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_FORMATS)}")
                return 1
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files_to_process)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        success_count = 0
        total_count = len(files_to_process)
        
        for i, file_path in enumerate(files_to_process, 1):
            print(f"\n[{i}/{total_count}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path.name}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if args.file:
                # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ - —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å –µ–≥–æ –∏–º–µ–Ω–µ–º
                file_output_dir = output_dir / file_path.stem
            else:
                # –î–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ - —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤
                file_output_dir = output_dir / file_path.stem
            
            success = processor.process_file(file_path, file_output_dir)
            if success:
                success_count += 1
        
        # –ò—Ç–æ–≥–∏
        print(f"\n{'='*50}")
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"‚úì –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤")
        
        if success_count < total_count:
            print(f"‚úó –û—à–∏–±–æ–∫: {total_count - success_count}")
            
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
        
        return 0 if success_count > 0 else 1
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())